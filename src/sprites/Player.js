import Phaser from 'phaser'

export default class extends Phaser.Plugin.Isometric.IsoSprite {

  constructor ({ game }) {
    super(game);

    // create a group for the player, allows flexibility when showing/hiding the sprite in front/behind of objects
	  this.group = game.add.group();
	  this.group.enableBody = true;
	  this.group.physicsBodyType = Phaser.Plugin.Isometric.ISOARCADE;

		// add player sprite to the game and assign its x, y, z, spritesheet, starting frame, and group
    this.player = game.add.isoSprite(32, 32, 1, 'goblin', 'idle1', this.group);

    // set player starting position isometric position
    this.isoX = 1;
    this.isoY = 1;

    // TODO: figure out what this does exactly
		this.player.anchor.set(0, 0);

		// confine player sprite to the bounds of the game world
    this.player.body.collideWorldBounds = true;

    // TODO: look into why this has to be set to false, ran into bugs when player was moving if this is true
    this.player.body.moves = false;

    // animations for idle and walking (should rename for clarity)
    this.player.idle = this.player.animations.add('idle', ['idle1','idle2','idle3','idle4'], 3, true, false);
    this.player.ne = this.player.animations.add('NE', ['move-ne1','move-ne2','move-ne3','move-ne4','move-ne5','move-ne6','move-ne7']);
    this.player.nw = this.player.animations.add('NW', ['move-nw1','move-nw2','move-nw3','move-nw4','move-nw5','move-nw6','move-nw7']);
    this.player.sw = this.player.animations.add('SW', ['move-sw1','move-sw2','move-sw3','move-sw4','move-sw5','move-sw6','move-sw7']);
    this.player.se = this.player.animations.add('SE', ['move-se1','move-se2','move-se3','move-se4','move-se5','move-se6','move-se7']);

    // starts off animating player as idle
    this.player.animations.play('idle');
  }

  // executed in util.js, receives input from coordinates generated by easystar 
  moveToPosition (x, y) {
    // TODO: player movement might be something that should be in the update function
    // TODO: clean this up, make more modular, lots of animations will get messy
    
    // determine what animation to use when moving
    if (!this.player.ne.isPlaying && this.isoX === x && this.isoY > y) { // player is moving to the north east
    	this.player.animations.stop();
		  this.player.ne.play(30, true);
    } else if (!this.player.sw.isPlaying && this.isoX === x && this.isoY < y) { // player is moving to the south west
    	this.player.animations.stop();
		  this.player.sw.play(30, true);
    } else if (!this.player.nw.isPlaying && (this.isoX > x && this.isoY === y)) { // player is moving to the north west
    	this.player.animations.stop();
		  this.player.nw.play(30, true);
    } else if (!this.player.se.isPlaying && this.isoX < x && this.isoY === y) { // player is moving to the south east
    	this.player.animations.stop();
		  this.player.se.play(30, true);
		}

		// animate the player to the tiles position
    game.add.tween(this.player).to({ isoX: x * 32, isoY: y * 32}, 500, Phaser.Easing.Quadratic.InOut, true);
    
    // update isometric x and y to new position
    this.isoX = x;
    this.isoY = y;
  }

  update () {
  	// do some stuffs
  }
}
